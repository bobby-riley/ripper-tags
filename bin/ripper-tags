#!/usr/bin/env ruby

if defined?(Bundler)
  Bundler.require
end

require 'tag_ripper'
require 'tag_ripper/default_formatter'
require 'tag_ripper/emacs_formatter'
require 'tag_ripper/vim_formatter'
require 'pp'
require 'optparse'
require 'ostruct'
require 'yajl'

options = OpenStruct.new(
  json: false,
  debug: false,
  vim: false,
  emacs: false,
  tag_file_name: "./tags",
  verbose: false,
  files: %w[.],
  recursive: false
)

all_tags = []

opt_parse = OptionParser.new do |opts|
  opts.banner = "Usage: ripper-tags [options] (file/directory)"
  opts.separator ""
  opts.on("-J", "--json", "Output nodes as json") do
    options.json = true
  end
  opts.on("-d", "--debug", "Output parse tree") do
    options.debug = true
  end
  opts.on("-v", "--verbose", "Output parse tree verbosely") do
    options.verbose = options.debug
  end
  opts.on("-e", "--emacs", "Output emacs format to tags file") do
    options.emacs = true
  end
  opts.on("-V", "--vim", "Output vim optimized format to tags file") do
    options.vim = true
  end
  opts.on("-f", "--tag-file FILE", "Filename to output tags to, default #{options.tag_file_name}") do |fname|
    options.tag_file_name = fname
  end
  opts.on("-R", "--recursive", "Descend recursively into given directory") do
    options.recursive = true
  end
  opts.separator " "
  opts.on_tail("-h", "--help", "Show this message") do
    $stderr.puts opts
    exit
  end
end
opt_parse.parse!(ARGV)

if ARGV.size > 0
  options.files = ARGV
end

File.open(options.tag_file_name, "w+") do |tag_file|

  options.files.each do |file_or_directory|
    begin
      if options.recursive && (File.directory?(file_or_directory))
        read_files = Dir["#{file_or_directory}/**/*"]
      else
        read_files = [file_or_directory]
      end
      read_files.each do |file|
        next if File.directory?(file)
        $stderr.puts "Reading file #{file}" if options.debug || options.verbose
        data = File.read(file)
        next if data =~ /_TAG_FILE_/ # don't parse annotated tag files
        sexp = TagRipper.new(data, file).parse
        v = TagRipper::Visitor.new(sexp, file, data)

        if options.verbose
          pp Ripper.sexp(data)

        elsif options.debug
          pp sexp
        end

        if options.json
          v.tags.each do |tag|
            tag_file.puts Yajl.dump(tag)
          end

        elsif options.emacs
          section = TagRipper::EmacsFormatter.new(v.tags).build

          tag_file.print "\x0C\n#{file},#{section.bytesize}\n#{section}\n"

        elsif options.vim
          all_tags += v.tags

        else
          tag_file.print(TagRipper::DefaultFormatter.new(v.tags).build)
        end
      end
    rescue Exception => e
      $stderr.puts [e, file_or_directory].inspect
      raise e
    end
  end

  if options.vim
    tag_file.print(TagRipper::VimFormatter.new(all_tags).build)
  end
end
